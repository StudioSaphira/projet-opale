// bot/onyx/commands/data/resetAll.js

const { SlashCommandBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle, ComponentType } = require('discord.js');
const fs = require('fs');
const path = require('path');

module.exports = {
  data: new SlashCommandBuilder()
    .setName('resetall')
    .setDescription('R√©initialise enti√®rement la base de donn√©es Saphira (IRR√âVERSIBLE).'),

  ownerOnly: true,

  async execute(interaction) {
    const ownerId = process.env.OWNER_ID;
    const devGuildId = process.env.DEV_GUILD_ID;

    if (interaction.user.id !== ownerId) {
      return interaction.reply({ content: 'üö´ Seul le propri√©taire peut ex√©cuter cette commande.', flags: 64 });
    }

    if (interaction.guildId !== devGuildId) {
      return interaction.reply({ content: 'üö´ Cette commande ne peut √™tre utilis√©e que sur le serveur de d√©veloppement.', flags: 64 });
    }

    const row = new ActionRowBuilder().addComponents(
      new ButtonBuilder()
        .setCustomId('confirm_reset_db')
        .setLabel('‚úÖ Confirmer')
        .setStyle(ButtonStyle.Danger),
      new ButtonBuilder()
        .setCustomId('cancel_reset_db')
        .setLabel('‚ùå Annuler')
        .setStyle(ButtonStyle.Secondary)
    );

    await interaction.reply({
      content: '‚ö†Ô∏è Cette action **supprimera toutes les donn√©es** de la base `saphira.sqlite`.\nSouhaites-tu vraiment continuer ?',
      components: [row],
      flags: 64
    });

    const confirmation = await interaction.channel.awaitMessageComponent({
      componentType: ComponentType.Button,
      time: 15_000
    }).catch(() => null);

    if (!confirmation) {
      return interaction.editReply({
        content: '‚è±Ô∏è Temps √©coul√©. R√©initialisation annul√©e.',
        components: []
      });
    }

    if (confirmation.customId === 'cancel_reset_db') {
      return confirmation.update({
        content: '‚ùå R√©initialisation annul√©e.',
        components: []
      });
    }

    if (confirmation.customId === 'confirm_reset_db') {
      const dbPath = path.resolve(__dirname, '../../../../shared/system/database/saphira.sqlite');

      try {
        fs.unlinkSync(dbPath); // Supprime le fichier SQLite
        // Optionnel : recr√©e un fichier vide ou appelle setupDatabase.js
        // require('../../../../shared/system/database/setupDatabase')();

        await confirmation.update({
          content: '‚úÖ Base de donn√©es supprim√©e avec succ√®s.',
          components: []
        });

        console.log('üóëÔ∏è Base de donn√©es saphira.sqlite supprim√©e par commande /resetall');
      } catch (err) {
        console.error('Erreur lors de la suppression de la base de donn√©es :', err);
        await confirmation.update({
          content: '‚ùå Une erreur est survenue lors de la suppression.',
          components: []
        });
      }
    }
  }
};